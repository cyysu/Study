链表：
	
	有头：索引
	无头：表示第一个是数据。
	无序：
	有序：从大到小或者从小到大 data
	循环：就是最后一个数据指向头(有头)或者第一个数据(无头)
	不循环：就是最后一个数据指向NULL
	单向：上一个节点指向下一个节点地址
	双向：两个节点可以相互指向。

	//定义链表节点信息
	//单向链表节点信息
	struct node_t{
		int data;
		struct node_t *next;
	}
	有头 无序 不循环 单向链表 * 1.c
	无头 无序 不循环 单向链表 *  ? 2.c
	无头 有序 不循环 单向链表 3.c
	有头 有序 不循环 单向链表 ===? 4.c

	无头 无序 循环 单向链表
	有头 无序 循环 单向链表
	无头 有序 循环 单向链表
	有头 有序 循环 单向链表

	//双向链表节点信息
	struct node_t{
		int data;				//数据
		struct node_t *next;	//保存下一个节点地址
		struct node_t *prev;	//保存上一个节点地址
	}
	有头 无序 循环 双向链表 * 封装
	无头 无序 循环 双向链表 *
	有头 有序 循环 双向链表
	无头 有序 循环 双向链表

	无头 无序 不循环 双向链表
	有头 无序 不循环 双向链表
	无头 有序 不循环 双向链表
	有头 有序 不循环 双向链表


	homework:
		实现有头 无序 不循环 单向链表逆序

		用链表实现约瑟夫环
			双向 循环 无序 无头


		

