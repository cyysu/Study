函数：
	实参：
	形参： 
		c : 不可以赋值
		c++ : 可以有默认值

	inline : 内联函数
		不可以被外部文件访问
		注意：如果外部文件调用内联函数，则还可以通过借助内联函数的同一个文件中内部函数来实现。
			1 间接调用
				main -> world -> inline hello()
				说明内联函数不可以被其他文件访问。
			2 直接调用 
				1.cpp => main() -> hello()
					extern void world() //声明
				2.cpp :
					inline void hello()
					void world() -> hello()

				可以验证内联函数具有宏特性

	reference :
		按值传参
		按地址传参
		按引用传参
		
		引用必须在定义的时候初始化。
		引用不可以指向地址
		引用返回不可以返回局部变量地址。
	reload:
		函数有多种不同形态 => 多态
		特征标不一样

		test(int a)
		test(int & a);
		test(int a, int b = 2);

		引用在什么情况下会重新指定一个新的空间。
	template:
		void *
		模板格式：
		template<typename T> // 
		template<class T>
		void Swap(T & a, T & b);

		template<typename T>  
		void Swap(T * a, T * a, int num);

		
		模板

		实现交换
			普通函数：
			模板：
			显示具体化：

	优先级：
		普通函数 -> 显示具体化 -> 模板 

==============================================
class:
	
	struct的成员公有
	class的成员默认是私有
		私有成员：private
		公有成员：public
		保护成员：protected

	由两部分组成：
		属性：
			
		方法：函数
			公有

	构造函数：初始化对象
		1 构造函数没有返回值 void都不需要
		2 构造函数名必须跟类名相同
		3 构在函数必须放在公有部分
		4 构造函数不可以单独调用
		5 如果定义一个传参构造函数，则必须定义一个无参的默认构造函数。

	析构函数：清理性工作
		~student()

		1 每一个类中只能有一个析构函数
		2 析构函数不接受任何参数

		析构函数调用：
			1 如果对象是一个局部变量，则析构函数会在函数结束的时候调用。

	＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	常量函数：？？？
	===================================
	1 无论创建多少个对象，静态变量只有一个副本。
	2 静态变量不能在方法中初始化，只能在外部初始化
	3 静态成员函数不可以访问非静态成员。


	用类实现stack


		


















