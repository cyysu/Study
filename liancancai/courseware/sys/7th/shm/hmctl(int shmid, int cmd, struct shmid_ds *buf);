SHMCTL(2)                                  Linux Programmer's Manual                                 SHMCTL(2)



NNAAMMEE
       shmctl - System V shared memory control

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//iippcc..hh>>
       ##iinncclluuddee <<ssyyss//sshhmm..hh>>

       iinntt sshhmmccttll((iinntt _s_h_m_i_d,, iinntt _c_m_d,, ssttrruucctt sshhmmiidd__ddss **_b_u_f));;

DDEESSCCRRIIPPTTIIOONN
       sshhmmccttll()  performs  the  control operation specified by _c_m_d on the System V shared memory segment whose
       identifier is given in _s_h_m_i_d.

       The _b_u_f argument is a pointer to a _s_h_m_i_d___d_s structure, defined in _<_s_y_s_/_s_h_m_._h_> as follows:

           struct shmid_ds {
               struct ipc_perm shm_perm;    /* Ownership and permissions */
               size_t          shm_segsz;   /* Size of segment (bytes) */
               time_t          shm_atime;   /* Last attach time */
               time_t          shm_dtime;   /* Last detach time */
               time_t          shm_ctime;   /* Last change time */
               pid_t           shm_cpid;    /* PID of creator */
               pid_t           shm_lpid;    /* PID of last shmat(2)/shmdt(2) */
               shmatt_t        shm_nattch;  /* No. of current attaches */
               ...
           };

       The _i_p_c___p_e_r_m structure is defined as follows (the highlighted fields are settable using IIPPCC__SSEETT):

           struct ipc_perm {
               key_t          __key;    /* Key supplied to shmget(2) */
               uid_t          uuiidd;      /* Effective UID of owner */
               gid_t          ggiidd;      /* Effective GID of owner */
               uid_t          cuid;     /* Effective UID of creator */
               gid_t          cgid;     /* Effective GID of creator */
               unsigned short mmooddee;     /* PPeerrmmiissssiioonnss + SHM_DEST and
                                           SHM_LOCKED flags */
               unsigned short __seq;    /* Sequence number */
           };

       Valid values for _c_m_d are:

       IIPPCC__SSTTAATT  Copy information from the kernel data structure  associated  with  _s_h_m_i_d  into  the  _s_h_m_i_d___d_s
                 structure  pointed to by _b_u_f.  The caller must have read permission on the shared memory seg‐
                 ment.

       IIPPCC__SSEETT   Write the values of some members of the _s_h_m_i_d___d_s structure pointed to by _b_u_f  to  the  kernel
                 data  structure  associated with this shared memory segment, updating also its _s_h_m___c_t_i_m_e mem‐
                 ber.  The following fields can be changed: _s_h_m___p_e_r_m_._u_i_d, _s_h_m___p_e_r_m_._g_i_d, and (the least signif‐
                 icant  9  bits  of)  _s_h_m___p_e_r_m_._m_o_d_e.   The effective UID of the calling process must match the
                 owner (_s_h_m___p_e_r_m_._u_i_d) or creator (_s_h_m___p_e_r_m_._c_u_i_d) of the shared memory segment, or  the  caller
                 must be privileged.

       IIPPCC__RRMMIIDD  Mark the segment to be destroyed.  The segment will only actually be destroyed after the last
                 process detaches it (i.e., when the _s_h_m___n_a_t_t_c_h member of the associated structure _s_h_m_i_d___d_s is
                 zero).   The  caller  must  be the owner or creator, or be privileged.  If a segment has been
                 marked for destruction, then the (nonstandard) SSHHMM__DDEESSTT flag of the  _s_h_m___p_e_r_m_._m_o_d_e  field  in
                 the associated data structure retrieved by IIPPCC__SSTTAATT will be set.

                 The  caller _m_u_s_t ensure that a segment is eventually destroyed; otherwise its pages that were
                 faulted in will remain in memory or swap.

                 See also the description of _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m___r_m_i_d___f_o_r_c_e_d in pprroocc(5).

       IIPPCC__IINNFFOO (Linux-specific)
                 Returns information about system-wide shared memory limits and parameters  in  the  structure
                 pointed  to by _b_u_f.  This structure is of type _s_h_m_i_n_f_o (thus, a cast is required), defined in
                 _<_s_y_s_/_s_h_m_._h_> if the __GGNNUU__SSOOUURRCCEE feature test macro is defined:

                     struct  shminfo {
                         unsigned long shmmax; /* Maximum segment size */
                         unsigned long shmmin; /* Minimum segment size;
                                                  always 1 */
                         unsigned long shmmni; /* Maximum number of segments */
                         unsigned long shmseg; /* Maximum number of segments
                                                  that a process can attach;
                                                  unused within kernel */
                         unsigned long shmall; /* Maximum number of pages of
                                                  shared memory, system-wide */
                     };

                 The _s_h_m_m_n_i, _s_h_m_m_a_x, and _s_h_m_a_l_l settings can be changed via _/_p_r_o_c files of the same name;  see
                 pprroocc(5) for details.

       SSHHMM__IINNFFOO (Linux-specific)
                 Returns a _s_h_m___i_n_f_o structure whose fields contain information about system resources consumed
                 by shared memory.  This structure is defined in _<_s_y_s_/_s_h_m_._h_> if the __GGNNUU__SSOOUURRCCEE  feature  test
                 macro is defined:

                     struct shm_info {
                         int           used_ids; /* # of currently existing
                                                    segments */
                         unsigned long shm_tot;  /* Total number of shared
                                                    memory pages */
                         unsigned long shm_rss;  /* # of resident shared
                                                    memory pages */
                         unsigned long shm_swp;  /* # of swapped shared
                                                    memory pages */
                         unsigned long swap_attempts;
                                                 /* Unused since Linux 2.4 */
                         unsigned long swap_successes;
                                                 /* Unused since Linux 2.4 */
                     };

       SSHHMM__SSTTAATT (Linux-specific)
                 Returns  a  _s_h_m_i_d___d_s structure as for IIPPCC__SSTTAATT.  However, the _s_h_m_i_d argument is not a segment
                 identifier, but instead an index into the kernel's internal array that maintains  information
                 about all shared memory segments on the system.

       The caller can prevent or allow swapping of a shared memory segment with the following _c_m_d values:

       SSHHMM__LLOOCCKK (Linux-specific)
                 Prevent  swapping  of the shared memory segment.  The caller must fault in any pages that are
                 required to be present after locking is enabled.  If a segment  has  been  locked,  then  the
                 (nonstandard)  SSHHMM__LLOOCCKKEEDD  flag  of  the _s_h_m___p_e_r_m_._m_o_d_e field in the associated data structure
                 retrieved by IIPPCC__SSTTAATT will be set.

       SSHHMM__UUNNLLOOCCKK (Linux-specific)
                 Unlock the segment, allowing it to be swapped out.

       In kernels before 2.6.10, only a privileged process could employ SSHHMM__LLOOCCKK and SSHHMM__UUNNLLOOCCKK.  Since kernel
       2.6.10,  an  unprivileged process can employ these operations if its effective UID matches the owner or
       creator UID of the segment, and (for SSHHMM__LLOOCCKK) the amount of memory  to  be  locked  falls  within  the
       RRLLIIMMIITT__MMEEMMLLOOCCKK resource limit (see sseettrrlliimmiitt(2)).

RREETTUURRNN VVAALLUUEE
       A successful IIPPCC__IINNFFOO or SSHHMM__IINNFFOO operation returns the index of the highest used entry in the kernel's
       internal array recording information about all shared memory segments.  (This information can  be  used
       with  repeated  SSHHMM__SSTTAATT  operations to obtain information about all shared memory segments on the sys‐
       tem.)  A successful SSHHMM__SSTTAATT operation returns the identifier of the shared memory segment whose  index
       was given in _s_h_m_i_d.  Other operations return 0 on success.

       On error, -1 is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEAACCCCEESS IIPPCC__SSTTAATT  or  SSHHMM__SSTTAATT  is requested and _s_h_m___p_e_r_m_._m_o_d_e does not allow read access for _s_h_m_i_d, and
              the calling process does not have the CCAAPP__IIPPCC__OOWWNNEERR capability.

       EEFFAAUULLTT The argument _c_m_d has value IIPPCC__SSEETT or IIPPCC__SSTTAATT but the address pointed to by _b_u_f isn't  accessi‐
              ble.

       EEIIDDRRMM  _s_h_m_i_d points to a removed identifier.

       EEIINNVVAALL _s_h_m_i_d  is  not a valid identifier, or _c_m_d is not a valid command.  Or: for a SSHHMM__SSTTAATT operation,
              the index value specified in _s_h_m_i_d referred to an array slot that is currently unused.

       EENNOOMMEEMM (In kernels since 2.6.9), SSHHMM__LLOOCCKK was specified and the size of the to-be-locked segment  would
              mean  that  the total bytes in locked shared memory segments would exceed the limit for the real
              user ID of the calling process.  This limit is defined by the RRLLIIMMIITT__MMEEMMLLOOCCKK soft resource limit
              (see sseettrrlliimmiitt(2)).

       EEOOVVEERRFFLLOOWW
              IIPPCC__SSTTAATT  is  attempted,  and  the  GID  or UID value is too large to be stored in the structure
              pointed to by _b_u_f.

       EEPPEERRMM  IIPPCC__SSEETT or IIPPCC__RRMMIIDD is attempted, and the effective user ID of the calling process is  not  that
              of  the  creator (found in _s_h_m___p_e_r_m_._c_u_i_d), or the owner (found in _s_h_m___p_e_r_m_._u_i_d), and the process
              was not privileged (Linux: did not have the CCAAPP__SSYYSS__AADDMMIINN capability).

              Or (in kernels before 2.6.9), SSHHMM__LLOOCCKK or SSHHMM__UUNNLLOOCCKK was specified,  but  the  process  was  not
              privileged  (Linux:  did  not have the CCAAPP__IIPPCC__LLOOCCKK capability).  (Since Linux 2.6.9, this error
              can also occur if the RRLLIIMMIITT__MMEEMMLLOOCCKK is 0 and the caller is not privileged.)

CCOONNFFOORRMMIINNGG TTOO
       SVr4, POSIX.1-2001.

NNOOTTEESS
       The inclusion of _<_s_y_s_/_t_y_p_e_s_._h_> and _<_s_y_s_/_i_p_c_._h_> isn't required on Linux or  by  any  version  of  POSIX.
       However, some old implementations required the inclusion of these header files, and the SVID also docu‐
       mented their inclusion.  Applications intended to be portable to such old systems may need  to  include
       these header files.

       The  IIPPCC__IINNFFOO,  SSHHMM__SSTTAATT and SSHHMM__IINNFFOO operations are used by the iippccss(1) program to provide information
       on allocated resources.  In the future these may modified or moved to a _/_p_r_o_c filesystem interface.

       Linux permits a process to attach (sshhmmaatt(2)) a shared memory segment that has already been  marked  for
       deletion using _s_h_m_c_t_l_(_I_P_C___R_M_I_D_).  This feature is not available on other UNIX implementations; portable
       applications should avoid relying on it.

       Various fields in a _s_t_r_u_c_t _s_h_m_i_d___d_s were typed as _s_h_o_r_t under Linux 2.2  and  have  become  _l_o_n_g  under
       Linux  2.4.   To  take  advantage  of this, a recompilation under glibc-2.1.91 or later should suffice.
       (The kernel distinguishes old and new calls by an IIPPCC__6644 flag in _c_m_d.)

SSEEEE AALLSSOO
       mmlloocckk(2), sseettrrlliimmiitt(2), sshhmmggeett(2), sshhmmoopp(2), ccaappaabbiilliittiieess(7), ssvviippcc(7)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of  the  project,  and
       information about reporting bugs, can be found at http://www.kernel.org/doc/man-pages/.



Linux                                             2013-03-18                                         SHMCTL(2)
