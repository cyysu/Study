指针：
	type name = value

	char * short * int *   ... => 4

	int *p = NULL => *p = 10; 导致段错误
	malloc:
	calloc:
	realloc:
	free()

VT:
==============================
内存：
	物理内存：
	虚拟内存：
		虚拟内存是通过页表存储机制实现的。
	32位操作系统，每一个程序都有4G虚拟内存空间
		0 - 3G : 用户态
			地址由高到底：
				stack	:栈段
					局部变量 模块变量 临时变量
					地址分配由高到底
				head	: 堆段 动态内存
					malloc申请空间地址
					地址分配则是由底到高0
				DS		: 数据段
					BSS	:	未初始化全局变量和静态变量
					RO	:	初始化全局变量和静态变量
				const	: 常量区
				code	: 代码段
		3 - 4G : 系统态

	作用域：	空间
	生存周期：	时间
		开始就是定义，结束就是死亡

	全局变量：
		作用域：作用整个程序
		生存周期：从定义到程序结束
	局部变量：
		作用域：只对本函数起作用
		生存周期：从定义到注销(return free)
		
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
修饰符：
	static	:	静态
		1 修饰局部变量
			局部变量只是对当前的函数起作用，而静态局部变量对整个函数起作用。
		2 修饰全局变量
			整个程序都可以访问，如果static修饰，则只能被本文件中的函数访问。
		3 修饰函数
			同上
	auto	:   动态
	const	:	常量
		
	signed	:	有符号
	unsigned:	无符号 %u


	extern	:	外部变量
	register:	寄存器变量
	volatile:	防止优化

====================================
一级指针传参
	传参：
		类型 个数 位置

	不可以返回局部变量地址

===================
一级指针和一维数组关系
==========================
二级指针：
	int **p = NULL;



	1 ： 实现str家族函数 原型保持一致
		char *strcpy(char *dest, const char *src);
	    char *strncpy(char *dest, const char *src, size_t n);
	    char *strcat(char *dest, const char *src);
	    char *strncat(char *dest, const char *src, size_t n);

	2 : 实现动态数组(int) malloc
		不会存在空间浪费或者空间不足。
	3 ：输入字符串，统计有多少个单词












